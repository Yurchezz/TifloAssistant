/**
 * Api Documentation
 * Api Documentation
 * <p>
 * OpenAPI spec version: 1.0
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package ua.iot.lviv.client.api;

import ua.iot.lviv.client.ApiCallback;
import ua.iot.lviv.client.ApiClient;
import ua.iot.lviv.client.ApiException;
import ua.iot.lviv.client.ApiResponse;
import ua.iot.lviv.client.Configuration;
import ua.iot.lviv.client.Pair;
import ua.iot.lviv.client.ProgressRequestBody;
import ua.iot.lviv.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import java.io.File;

import ua.iot.lviv.client.model.SoundBoard;
import ua.iot.lviv.client.model.Recorded;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MoviecontrollerApi {
    private ApiClient apiClient;

    public MoviecontrollerApi() {
//        this(Configuration.getDefaultApiClient());
        apiClient = new ApiClient();
    }

    public MoviecontrollerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addNewBoardUsingPOST */
    private com.squareup.okhttp.Call addNewBoardUsingPOSTCall(File backgroundPhoto, String description, String duration, File fileData, File foregroundPhoto, String movieName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;


        // create path and map variables
        String localVarPath = "/add".replaceAll("\\{format\\}", "json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (description != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "description", description));
        if (duration != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "duration", duration));
        if (movieName != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "movieName", movieName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (backgroundPhoto != null)
            localVarFormParams.put("backgroundPhoto", backgroundPhoto);
        if (fileData != null)
            localVarFormParams.put("fileData", fileData);
        if (foregroundPhoto != null)
            localVarFormParams.put("foregroundPhoto", foregroundPhoto);

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Add new movie
     *
     * @param backgroundPhoto backgroundPhoto (optional)
     * @param description     description (optional, default to This movie is about kurochka's dream)
     * @param duration        duration (optional, default to 3:30:03)
     * @param fileData        fileData (optional)
     * @param foregroundPhoto foregroundPhoto (optional)
     * @param movieName       movieName (optional, default to Moskovskaya techka)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String addNewBoardUsingPOST(File backgroundPhoto, String description, String duration, File fileData, File foregroundPhoto, String movieName) throws ApiException {
        ApiResponse<String> resp = addNewBoardUsingPOSTWithHttpInfo(backgroundPhoto, description, duration, fileData, foregroundPhoto, movieName);
        return resp.getData();
    }

    /**
     * Add new movie
     *
     * @param backgroundPhoto backgroundPhoto (optional)
     * @param description     description (optional, default to This movie is about kurochka's dream)
     * @param duration        duration (optional, default to 3:30:03)
     * @param fileData        fileData (optional)
     * @param foregroundPhoto foregroundPhoto (optional)
     * @param movieName       movieName (optional, default to Moskovskaya techka)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> addNewBoardUsingPOSTWithHttpInfo(File backgroundPhoto, String description, String duration, File fileData, File foregroundPhoto, String movieName) throws ApiException {
        com.squareup.okhttp.Call call = addNewBoardUsingPOSTCall(backgroundPhoto, description, duration, fileData, foregroundPhoto, movieName, null, null);
        Type localVarReturnType = new TypeToken<String>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new movie (asynchronously)
     *
     * @param backgroundPhoto backgroundPhoto (optional)
     * @param description     description (optional, default to This movie is about kurochka's dream)
     * @param duration        duration (optional, default to 3:30:03)
     * @param fileData        fileData (optional)
     * @param foregroundPhoto foregroundPhoto (optional)
     * @param movieName       movieName (optional, default to Moskovskaya techka)
     * @param callback        The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNewBoardUsingPOSTAsync(File backgroundPhoto, String description, String duration, File fileData, File foregroundPhoto, String movieName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNewBoardUsingPOSTCall(backgroundPhoto, description, duration, fileData, foregroundPhoto, movieName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getAudiofileByIdUsingGET */
    private com.squareup.okhttp.Call getAudiofileByIdUsingGETCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAudiofileByIdUsingGET(Async)");
        }


        // create path and map variables
        String localVarPath = "/audiofiles/{id}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get movie from database by id
     *
     * @param id id (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] getAudiofileByIdUsingGET(Integer id) throws ApiException {
        ApiResponse<byte[]> resp = getAudiofileByIdUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get movie from database by id
     *
     * @param id id (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> getAudiofileByIdUsingGETWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getAudiofileByIdUsingGETCall(id, null, null);
        Type localVarReturnType = new TypeToken<byte[]>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get movie from database by id (asynchronously)
     *
     * @param id       id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAudiofileByIdUsingGETAsync(Integer id, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAudiofileByIdUsingGETCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getBackgroundPhotoByIdUsingGET */
    private com.squareup.okhttp.Call getBackgroundPhotoByIdUsingGETCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBackgroundPhotoByIdUsingGET(Async)");
        }


        // create path and map variables
        String localVarPath = "/backgrounds/{id}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get background photo of movie
     *
     * @param id id (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] getBackgroundPhotoByIdUsingGET(Integer id) throws ApiException {
        ApiResponse<byte[]> resp = getBackgroundPhotoByIdUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get background photo of movie
     *
     * @param id id (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> getBackgroundPhotoByIdUsingGETWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getBackgroundPhotoByIdUsingGETCall(id, null, null);
        Type localVarReturnType = new TypeToken<byte[]>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get background photo of movie (asynchronously)
     *
     * @param id       id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBackgroundPhotoByIdUsingGETAsync(Integer id, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBackgroundPhotoByIdUsingGETCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getBoardByIdUsingGET */
    private com.squareup.okhttp.Call getBoardByIdUsingGETCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBoardByIdUsingGET(Async)");
        }


        // create path and map variables
        String localVarPath = "/sounds/{id}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get information about movie from database by id
     *
     * @param id id (required)
     * @return List&lt;SoundBoard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SoundBoard> getBoardByIdUsingGET(Integer id) throws ApiException {
        ApiResponse<List<SoundBoard>> resp = getBoardByIdUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get information about movie from database by id
     *
     * @param id id (required)
     * @return ApiResponse&lt;List&lt;SoundBoard&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SoundBoard>> getBoardByIdUsingGETWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getBoardByIdUsingGETCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<SoundBoard>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get information about movie from database by id (asynchronously)
     *
     * @param id       id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBoardByIdUsingGETAsync(Integer id, final ApiCallback<List<SoundBoard>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBoardByIdUsingGETCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SoundBoard>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getForegroundPhotoByIdUsingGET */
    private com.squareup.okhttp.Call getForegroundPhotoByIdUsingGETCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getForegroundPhotoByIdUsingGET(Async)");
        }


        // create path and map variables
        String localVarPath = "/foregrounds/{id}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get background photo of movie
     *
     * @param id id (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] getForegroundPhotoByIdUsingGET(Integer id) throws ApiException {
        ApiResponse<byte[]> resp = getForegroundPhotoByIdUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get background photo of movie
     *
     * @param id id (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> getForegroundPhotoByIdUsingGETWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getForegroundPhotoByIdUsingGETCall(id, null, null);
        Type localVarReturnType = new TypeToken<byte[]>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get background photo of movie (asynchronously)
     *
     * @param id       id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getForegroundPhotoByIdUsingGETAsync(Integer id, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getForegroundPhotoByIdUsingGETCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getSoundsUsingGET */
    private com.squareup.okhttp.Call getSoundsUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;


        // create path and map variables
        String localVarPath = "/sounds".replaceAll("\\{format\\}", "json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of all movies from database
     *
     * @return List&lt;SoundBoard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SoundBoard> getSoundsUsingGET() throws ApiException {
        ApiResponse<List<SoundBoard>> resp = getSoundsUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get list of all movies from database
     *
     * @return ApiResponse&lt;List&lt;SoundBoard&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SoundBoard>> getSoundsUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSoundsUsingGETCall(null, null);
        Type localVarReturnType = new TypeToken<List<SoundBoard>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of all movies from database (asynchronously)
     *
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSoundsUsingGETAsync(final ApiCallback<List<SoundBoard>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSoundsUsingGETCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SoundBoard>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for recognizeMovieUsingPOST */
    private com.squareup.okhttp.Call recognizeMovieUsingPOSTCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling recognizeMovieUsingPOST(Async)");
        }


        // create path and map variables
        String localVarPath = "/recognize".replaceAll("\\{format\\}", "json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
            localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * recognizeMovie
     *
     * @param file file (required)
     * @return Recorded
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Recorded recognizeMovieUsingPOST(File file) throws ApiException {
        ApiResponse<Recorded> resp = recognizeMovieUsingPOSTWithHttpInfo(file);
        return resp.getData();
    }

    /**
     * recognizeMovie
     *
     * @param file file (required)
     * @return ApiResponse&lt;Recorded&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Recorded> recognizeMovieUsingPOSTWithHttpInfo(File file) throws ApiException {
        com.squareup.okhttp.Call call = recognizeMovieUsingPOSTCall(file, null, null);
        Type localVarReturnType = new TypeToken<Recorded>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * recognizeMovie (asynchronously)
     *
     * @param file     file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recognizeMovieUsingPOSTAsync(File file, final ApiCallback<Recorded> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recognizeMovieUsingPOSTCall(file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Recorded>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
